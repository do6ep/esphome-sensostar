esphome:
  name: sensostar
  comment: SensoStar Energy Meter
  platformio_options:
    board_build.arduino.memory_type: dio
  on_boot:
    then:
      - output.turn_on: adc_control  # IO1 HIGH at boot
      - script.execute: read_adc_script  # Immediately read ADC once at boot
      - delay: 2000ms  # Kurze Wartezeit, damit WLAN-Status gesetzt wird
      - if:
          condition:
            lambda: 'return !id(wifi_connected);'
          then:
            - script.execute: ap_mode_blink      
      - lambda: |-
          if (!id(wifi_connected)) {
            id(ap_mode_blink).execute();
          }      
          id(api_key_text).publish_state("${api_key_display}");
    
esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB
  framework:
    type: arduino

wifi:
# Uncomment this if you have ented your credentials in the secrets.yaml
# anyway at least the api_encryption_key: section must be present in the secrets.yaml
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password

  ap:
    ssid: "SensoStar"
  reboot_timeout: 0s 
  
  on_connect:
    then:
      - lambda: 'id(wifi_connected) = true;'
  on_disconnect:
    then:
      - lambda: 'id(wifi_connected) = false;'
    
captive_portal:

logger:
  level: info
  hardware_uart: USB_CDC

api:
  encryption:
    key: !secret api_encryption_key # create use openssl rand -base64 32
    
ota:
  platform: esphome
    
web_server:
  version: 3
  port: 80
    
external_components:
  - source:
      #type: local
      #path: !secret local_path
      type: git                                         # Be careful ESPhome is caching the repository. Do the following to update the cache
      url: https://github.com/do6ep/esphome-sensostar    # Deleting the .esphome/external_components/ cache, or 
      ref: main  # or a specific commit SHA             # Using a ref: to pin to a specific commit or branch.
    components: [ SensoStar_MBus ]

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Amsterdam
    servers: ["0.de.pool.ntp.org", "1.de.pool.ntp.org", "2.de.pool.ntp.org", "3.de.pool.ntp.org"]

uart:
  - id: uart_mbus
    tx_pin: GPIO21
    rx_pin: GPIO20
    baud_rate: 2400
    parity: EVEN
    
SensoStar_MBus:
  id: sensostar_id
  uart_id: uart_mbus
  update_interval: 10s
  data_led: mbus_data_led # Add this line, linking to the output below

sensor:
  - platform: SensoStar_MBus
    energy:
      name: "SensoStar Energy"
    volume:
      name: "SensoStar Volume"
    power:
      name: "SensoStar Power"
    flow:
      name: "SensoStar Flow"
    temperature_flow:
      name: "SensoStar Flow Temperature"
    temperature_return:
      name: "SensoStar Return Temperature"
    temperature_diff:
      name: "SensoStar Temperature Difference"
    calculated_power:
      name: "SensoStar Calculated Power"
      
  - platform: adc
    pin: GPIO0
    id: adc_input_sensor
    name: "SensoStar Battery Level"
    update_interval: never  # done by interval:
    filters:
      - lambda: return x * 3.6; # Vbat is measured via a resistive divider 39k--o--15k

  - platform: wifi_signal
    name: "SensoStar WiFi Signal"
    id: wifi_signal_sensor
    update_interval: 60s      

substitutions:
  api_key_display: !secret api_encryption_key

text_sensor:
  - platform: SensoStar_MBus
    status:
      name: "SensoStar Status"

  # Show API encryption key in the web interface
  - platform: template
    name: "API Encryption Key"
    id: api_key_text
    entity_category: config
    lambda: |-
      return std::string("${api_key_display}");
    update_interval: never   

output:
  - platform: gpio
    pin: GPIO01
    id: adc_control
  - platform: gpio
    pin:
      number: GPIO8 # builtin LED
      inverted: true
    id: heartbeat_output
  - platform: gpio
    pin: GPIO6
    id: wifi_led
  - platform: gpio
    pin: GPIO5
    id: mbus_data_led    
 
script:
  - id: read_adc_script
    then:
      - output.turn_off: adc_control     # Set IO1 LOW
      - delay: 8ms  # wait until the capacitor on the resistive divider is charged
      - component.update: adc_input_sensor  # Trigger ADC read
      - output.turn_on: adc_control      # Set IO1 HIGH

  - id: ap_mode_blink
    mode: restart
    then:
      - logger.log: "AP mode blinking started"
      - while:
            condition:
              lambda: 'return !id(wifi_connected);'
            then:
              - output.turn_on: wifi_led
              - delay: 200ms
              - output.turn_off: wifi_led
              - delay: 1000ms
      - output.turn_off: wifi_led  # LED aus beim Verlassen des AP-Modus 

interval:
  - interval: 600s
    then:
      - script.execute: read_adc_script
  - interval: 5s
    then:
      - light.turn_on: heartbeat_led
      - delay: 500ms
      - light.turn_off: heartbeat_led      
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return id(wifi_connected);'
          then:
            - output.turn_on: wifi_led
          else:
            - output.turn_off: wifi_led

button:
  - platform: template
    name: "Read battery level now"
    on_press:
      then:
        - script.execute: read_adc_script
  - platform: template
    name: "Read WiFi Signal now"
    on_press:
      then:
        - component.update: wifi_signal_sensor        
        
light:
  - platform: binary
    id: heartbeat_led
    output: heartbeat_output
    internal: true  # hide from Home Assistant unless needed
    
binary_sensor:
  - platform: status
    name: "ESP Status"
    id: esp_status
    internal: true  # hide from Home Assistant unless needed    

globals:
  - id: wifi_connected
    type: bool
    restore_value: no
    initial_value: 'false'
 

